<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>

<#@ assembly name="$(ProjectDir)$(OutDir)\Distancify.Migrations.Litium.Dll" #>
<#@ import namespace="Distancify.Migrations.Litium.SeedBuilder" #>
<#@ output extension=".txt" #>
<#
            var generator = new LitiumMigrationGenerator(new GraphqlClient());
			var projectPath = this.Host.ResolveAssemblyReference("$(ProjectDir)");
			var configurations = ConfigurationReader.ReadConfigurationsFromFile(projectPath+"migrationConfigration.yml");

			            foreach (var config in configurations)
            {
				#>
using Distancify.Migrations.Litium;

namespace <#= config.Namespace #>
{
	public class <#= config.ClassName #> : <#= config.BaseMigration #>
	{
		public override void Apply()
		{
			<#= generator.GenerateApplyCode(config).Content #> 
		}
	}
}

				<#
				SaveOutput(config.Output);
            }
#>

<#+
private void SaveOutput(string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(this.Host.TemplateFile);
  string outputFilePath = Path.Combine(templateDirectory, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}
#>